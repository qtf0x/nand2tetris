// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    /* choose x or 0 */
    Mux16(a=x, b=false, sel=zx, out=x1);

    /* choose x or NOT x */
    Not16(in=x1, out=notX1);
    Mux16(a=x1, b=notX1, sel=nx, out=mutX);

    /* choose y or 0 */
    Mux16(a=y, b=false, sel=zy, out=y1);

    /* choose y or NOT y */
    Not16(in=y1, out=notY1);
    Mux16(a=y1, b=notY1, sel=ny, out=mutY);

    /* choose (x + y) or (x & y) */
    And16(a=mutX, b=mutY, out=andXY);
    Add16(a=mutX, b=mutY, out=addXY);
    Mux16(a=andXY, b=addXY, sel=f, out=out1);

    /* choose out or NOT out
       also split output and check for negative */
    Not16(in=out1, out=notOut1);
    Mux16(a=out1, b=notOut1, sel=no, out=out, out[0..7]=outHalf1,
    out[8..15]=outHalf2, out[15]=ng);

    /* check if output is all zeros */
    Or8Way(in=outHalf1, out=orHalf1);
    Or8Way(in=outHalf2, out=orHalf2);
    Or(a=orHalf1, b=orHalf2, out=orOut);
    Not(in=orOut, out=zr);
}
